{
    "components": {
        "schemas": {
            "Application": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "the id of the app"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the app"
                    },
                    "icon": {
                        "type": "string",
                        "description": "the [icon hash](#DOCS_REFERENCE/image-formatting) of the app"
                    },
                    "description": {
                        "type": "string",
                        "description": "the description of the app"
                    },
                    "rpc_origins": {
                        "type": "array",
                        "description": "an array of rpc origin urls, if rpc is enabled",
                        "items": {
                            "type": "string"
                        }
                    },
                    "bot_public": {
                        "type": "boolean",
                        "description": "when false only app owner can join the app's bot to guilds"
                    },
                    "bot_require_code_grant": {
                        "type": "boolean",
                        "description": "when true the app's bot will only join upon completion of the full oauth2 code grant flow"
                    },
                    "terms_of_service_url": {
                        "type": "string",
                        "description": "the url of the app's terms of service"
                    },
                    "privacy_policy_url": {
                        "type": "string",
                        "description": "the url of the app's privacy policy"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/User",
                        "description": "partial user object containing info on the owner of the application"
                    },
                    "verify_key": {
                        "type": "string",
                        "description": "the hex encoded key for verification in interactions and the GameSDK's [GetTicket](#DOCS_GAME_SDK_APPLICATIONS/getticket)"
                    },
                    "team": {
                        "$ref": "#/components/schemas/DataModelsTeam",
                        "description": "if the application belongs to a team, this will be a list of the members of that team"
                    },
                    "guild_id": {
                        "type": "string",
                        "description": "if this application is a game sold on Discord, this field will be the guild to which it has been linked"
                    },
                    "primary_sku_id": {
                        "type": "string",
                        "description": "if this application is a game sold on Discord, this field will be the id of the \"Game SKU\" that is created, if exists"
                    },
                    "slug": {
                        "type": "string",
                        "description": "if this application is a game sold on Discord, this field will be the URL slug that links to the store page"
                    },
                    "cover_image": {
                        "type": "string",
                        "description": "the application's default rich presence invite [cover image hash](#DOCS_REFERENCE/image-formatting)"
                    },
                    "flags": {
                        "type": "integer",
                        "description": "the application's public [flags](#DOCS_RESOURCES_APPLICATION/application-object-application-flags)"
                    },
                    "tags": {
                        "type": "array",
                        "description": "up to 5 tags describing the content and functionality of the application",
                        "items": {
                            "type": "string"
                        }
                    },
                    "install_params": {
                        "$ref": "#/components/schemas/InstallParams",
                        "description": "settings for the application's default in-app authorization link, if enabled"
                    },
                    "custom_install_url": {
                        "type": "string",
                        "description": "the application's default custom authorization link, if enabled"
                    },
                    "role_connections_verification_url": {
                        "type": "string",
                        "description": "the application's role connection verification entry point, which when configured will render the app as a verification method in the guild role verification configuration"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "icon",
                    "description",
                    "bot_public",
                    "bot_require_code_grant",
                    "verify_key",
                    "team"
                ]
            },
            "InstallParams": {
                "type": "object",
                "properties": {
                    "scopes": {
                        "type": "array",
                        "description": "the [scopes](#DOCS_TOPICS_OAUTH2/shared-resources-oauth2-scopes) to add the application to the server with",
                        "items": {
                            "type": "string"
                        }
                    },
                    "permissions": {
                        "type": "string",
                        "description": "the [permissions](#DOCS_TOPICS_PERMISSIONS) to request for the bot role"
                    }
                },
                "required": [
                    "scopes",
                    "permissions"
                ]
            },
            "ApplicationRoleConnectionMetadata": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "unknown",
                        "description": "type of metadata value"
                    },
                    "key": {
                        "type": "string",
                        "description": "dictionary key for the metadata field (must be `a-z`, `0-9`, or `_` characters; 1-50 characters)"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the metadata field (1-100 characters)"
                    },
                    "name_localizations": {
                        "type": "unknown",
                        "description": "translations of the name"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of the metadata field (1-200 characters)"
                    },
                    "description_localizations": {
                        "type": "unknown",
                        "description": "translations of the description"
                    }
                },
                "required": [
                    "type",
                    "key",
                    "name",
                    "description"
                ]
            },
            "AuditLog": {
                "type": "object",
                "properties": {
                    "application_commands": {
                        "$ref": "#/components/schemas/ApplicationCommand",
                        "description": "List of application commands referenced in the audit log"
                    },
                    "audit_log_entries": {
                        "$ref": "#/components/schemas/AuditLogEntry",
                        "description": "List of audit log entries, sorted from most to least recent"
                    },
                    "auto_moderation_rules": {
                        "$ref": "#/components/schemas/AutoModerationRule",
                        "description": "List of auto moderation rules referenced in the audit log"
                    },
                    "guild_scheduled_events": {
                        "$ref": "#/components/schemas/GuildScheduledEvent",
                        "description": "List of guild scheduled events referenced in the audit log"
                    },
                    "integrations": {
                        "$ref": "#/components/schemas/Integration",
                        "description": "List of partial integration objects"
                    },
                    "threads": {
                        "$ref": "#/components/schemas/Channel",
                        "description": "List of threads referenced in the audit log\\*"
                    },
                    "users": {
                        "$ref": "#/components/schemas/User",
                        "description": "List of users referenced in the audit log"
                    },
                    "webhooks": {
                        "$ref": "#/components/schemas/Webhook",
                        "description": "List of webhooks referenced in the audit log"
                    }
                },
                "required": [
                    "application_commands",
                    "audit_log_entries",
                    "auto_moderation_rules",
                    "guild_scheduled_events",
                    "integrations",
                    "threads",
                    "users",
                    "webhooks"
                ]
            },
            "AuditLogEntry": {
                "type": "object",
                "properties": {
                    "target_id": {
                        "type": "string",
                        "description": "ID of the affected entity (webhook, user, role, etc.)"
                    },
                    "changes": {
                        "$ref": "#/components/schemas/AuditLogChange",
                        "description": "Changes made to the target_id"
                    },
                    "user_id": {
                        "type": "string",
                        "description": "User or app that made the changes"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the entry"
                    },
                    "action_type": {
                        "type": "unknown",
                        "description": "Type of action that occurred"
                    },
                    "options": {
                        "type": "unknown",
                        "description": "Additional info for certain event types"
                    },
                    "reason": {
                        "type": "string",
                        "description": "Reason for the change (1-512 characters)"
                    }
                },
                "required": [
                    "target_id",
                    "user_id",
                    "id",
                    "action_type"
                ]
            },
            "AuditLogChange": {
                "type": "object",
                "properties": {
                    "new_value": {
                        "type": "mixed",
                        "description": "New value of the key"
                    },
                    "old_value": {
                        "type": "mixed",
                        "description": "Old value of the key"
                    },
                    "key": {
                        "type": "string",
                        "description": "Name of the changed entity, with a few [exceptions](#DOCS_RESOURCES_AUDIT_LOG/audit-log-change-object-audit-log-change-exceptions)"
                    }
                },
                "required": [
                    "key"
                ]
            },
            "AutoModerationRule": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "the id of this rule"
                    },
                    "guild_id": {
                        "type": "string",
                        "description": "the id of the guild which this rule belongs to"
                    },
                    "name": {
                        "type": "string",
                        "description": "the rule name"
                    },
                    "creator_id": {
                        "type": "string",
                        "description": "the user which first created this rule"
                    },
                    "event_type": {
                        "type": "integer",
                        "description": "the rule [event type](#DOCS_RESOURCES_AUTO_MODERATION/auto-moderation-rule-object-event-types)"
                    },
                    "trigger_type": {
                        "type": "integer",
                        "description": "the rule [trigger type](#DOCS_RESOURCES_AUTO_MODERATION/auto-moderation-rule-object-trigger-types)"
                    },
                    "trigger_metadata": {
                        "type": "object",
                        "description": "the rule [trigger metadata](#DOCS_RESOURCES_AUTO_MODERATION/auto-moderation-rule-object-trigger-metadata)"
                    },
                    "actions": {
                        "$ref": "#/components/schemas/AutoModerationAction",
                        "description": "the actions which will execute when the rule is triggered"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "whether the rule is enabled"
                    },
                    "exempt_roles": {
                        "type": "array",
                        "description": "the role ids that should not be affected by the rule (Maximum of 20)",
                        "items": {
                            "type": "string"
                        }
                    },
                    "exempt_channels": {
                        "type": "array",
                        "description": "the channel ids that should not be affected by the rule (Maximum of 50)",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "id",
                    "guild_id",
                    "name",
                    "creator_id",
                    "event_type",
                    "trigger_type",
                    "trigger_metadata",
                    "actions",
                    "enabled",
                    "exempt_roles",
                    "exempt_channels"
                ]
            },
            "AutoModerationAction": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "unknown",
                        "description": "the type of action"
                    },
                    "metadata *": {
                        "type": "unknown",
                        "description": "additional metadata needed during execution for this specific action type"
                    }
                },
                "required": [
                    "type",
                    "metadata *"
                ]
            },
            "Channel": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "the id of this channel"
                    },
                    "type": {
                        "type": "integer",
                        "description": "the [type of channel](#DOCS_RESOURCES_CHANNEL/channel-object-channel-types)"
                    },
                    "guild_id": {
                        "type": "string",
                        "description": "the id of the guild (may be missing for some channel objects received over gateway guild dispatches)"
                    },
                    "position": {
                        "type": "integer",
                        "description": "sorting position of the channel"
                    },
                    "permission_overwrites": {
                        "$ref": "#/components/schemas/Overwrite",
                        "description": "explicit permission overwrites for members and roles"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the channel (1-100 characters)"
                    },
                    "topic": {
                        "type": "string",
                        "description": "the channel topic (0-4096 characters for `GUILD_FORUM` channels, 0-1024 characters for all others)"
                    },
                    "nsfw": {
                        "type": "boolean",
                        "description": "whether the channel is nsfw"
                    },
                    "last_message_id": {
                        "type": "string",
                        "description": "the id of the last message sent in this channel (or thread for `GUILD_FORUM` channels) (may not point to an existing or valid message or thread)"
                    },
                    "bitrate": {
                        "type": "integer",
                        "description": "the bitrate (in bits) of the voice channel"
                    },
                    "user_limit": {
                        "type": "integer",
                        "description": "the user limit of the voice channel"
                    },
                    "rate_limit_per_user": {
                        "type": "integer",
                        "description": "amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission `manage_messages` or `manage_channel`, are unaffected"
                    },
                    "recipients": {
                        "$ref": "#/components/schemas/User",
                        "description": "the recipients of the DM"
                    },
                    "icon": {
                        "type": "string",
                        "description": "icon hash of the group DM"
                    },
                    "owner_id": {
                        "type": "string",
                        "description": "id of the creator of the group DM or thread"
                    },
                    "application_id": {
                        "type": "string",
                        "description": "application id of the group DM creator if it is bot-created"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "for group DM channels: whether the channel is managed by an application via the `gdm.join` OAuth2 scope"
                    },
                    "parent_id": {
                        "type": "string",
                        "description": "for guild channels: id of the parent category for a channel (each parent category can contain up to 50 channels), for threads: id of the text channel this thread was created"
                    },
                    "last_pin_timestamp": {
                        "type": "string",
                        "description": "when the last pinned message was pinned. This may be `null` in events such as `GUILD_CREATE` when a message is not pinned.",
                        "format": "date-time"
                    },
                    "rtc_region": {
                        "type": "string",
                        "description": "[voice region](#DOCS_RESOURCES_VOICE/voice-region-object) id for the voice channel, automatic when set to null"
                    },
                    "video_quality_mode": {
                        "type": "integer",
                        "description": "the camera [video quality mode](#DOCS_RESOURCES_CHANNEL/channel-object-video-quality-modes) of the voice channel, 1 when not present"
                    },
                    "message_count": {
                        "type": "integer",
                        "description": "number of messages (not including the initial message or deleted messages) in a thread."
                    },
                    "member_count": {
                        "type": "integer",
                        "description": "an approximate count of users in a thread, stops counting at 50"
                    },
                    "thread_metadata": {
                        "$ref": "#/components/schemas/ThreadMetadata",
                        "description": "thread-specific fields not needed by other channels"
                    },
                    "member": {
                        "$ref": "#/components/schemas/ThreadMember",
                        "description": "thread member object for the current user, if they have joined the thread, only included on certain API endpoints"
                    },
                    "default_auto_archive_duration": {
                        "type": "integer",
                        "description": "default duration, copied onto newly created threads, in minutes, threads will stop showing in the channel list after the specified period of inactivity, can be set to: 60, 1440, 4320, 10080"
                    },
                    "permissions": {
                        "type": "string",
                        "description": "computed permissions for the invoking user in the channel, including overwrites, only included when part of the `resolved` data received on a slash command interaction"
                    },
                    "flags": {
                        "type": "integer",
                        "description": "[channel flags](#DOCS_RESOURCES_CHANNEL/channel-object-channel-flags) combined as a [bitfield](https://en.wikipedia.org/wiki/Bit_field)"
                    },
                    "total_message_sent": {
                        "type": "integer",
                        "description": "number of messages ever sent in a thread, it's similar to `message_count` on message creation, but will not decrement the number when a message is deleted"
                    },
                    "available_tags": {
                        "$ref": "#/components/schemas/ForumTag",
                        "description": "the set of tags that can be used in a `GUILD_FORUM` channel"
                    },
                    "applied_tags": {
                        "type": "array",
                        "description": "the IDs of the set of tags that have been applied to a thread in a `GUILD_FORUM` channel",
                        "items": {
                            "type": "string"
                        }
                    },
                    "default_reaction_emoji": {
                        "$ref": "#/components/schemas/DefaultReaction",
                        "description": "the emoji to show in the add reaction button on a thread in a `GUILD_FORUM` channel"
                    },
                    "default_thread_rate_limit_per_user": {
                        "type": "integer",
                        "description": "the initial `rate_limit_per_user` to set on newly created threads in a channel. this field is copied to the thread at creation time and does not live update."
                    },
                    "default_sort_order": {
                        "type": "integer",
                        "description": "the [default sort order type](#DOCS_RESOURCES_CHANNEL/channel-object-sort-order-types) used to order posts in `GUILD_FORUM` channels. Defaults to `null`, which indicates a preferred sort order hasn't been set by a channel admin"
                    },
                    "default_forum_layout": {
                        "type": "integer",
                        "description": "the [default forum layout view](#DOCS_RESOURCES_CHANNEL/channel-object-forum-layout-types) used to display posts in `GUILD_FORUM` channels. Defaults to `0`, which indicates a layout view has not been set by a channel admin"
                    }
                },
                "required": [
                    "id",
                    "type",
                    "rate_limit_per_user",
                    "message_count"
                ]
            },
            "Message": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the message"
                    },
                    "channel_id": {
                        "type": "string",
                        "description": "id of the channel the message was sent in"
                    },
                    "author": {
                        "$ref": "#/components/schemas/User",
                        "description": "the author of this message (not guaranteed to be a valid user, see below)"
                    },
                    "content": {
                        "type": "string",
                        "description": "contents of the message"
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "when this message was sent",
                        "format": "date-time"
                    },
                    "edited_timestamp": {
                        "type": "string",
                        "description": "when this message was edited (or null if never)",
                        "format": "date-time"
                    },
                    "tts": {
                        "type": "boolean",
                        "description": "whether this was a TTS message"
                    },
                    "mention_everyone": {
                        "type": "boolean",
                        "description": "whether this message mentions everyone"
                    },
                    "mentions": {
                        "$ref": "#/components/schemas/User",
                        "description": "users specifically mentioned in the message"
                    },
                    "mention_roles": {
                        "$ref": "#/components/schemas/Role",
                        "description": "roles specifically mentioned in this message"
                    },
                    "mention_channels": {
                        "$ref": "#/components/schemas/ChannelMention",
                        "description": "channels specifically mentioned in this message"
                    },
                    "attachments": {
                        "$ref": "#/components/schemas/Attachment",
                        "description": "any attached files"
                    },
                    "embeds": {
                        "$ref": "#/components/schemas/Embed",
                        "description": "any embedded content"
                    },
                    "reactions": {
                        "$ref": "#/components/schemas/Reaction",
                        "description": "reactions to the message"
                    },
                    "nonce": {
                        "type": "integer",
                        "description": "used for validating a message was sent"
                    },
                    "pinned": {
                        "type": "boolean",
                        "description": "whether this message is pinned"
                    },
                    "webhook_id": {
                        "type": "string",
                        "description": "if the message is generated by a webhook, this is the webhook's id"
                    },
                    "type": {
                        "type": "integer",
                        "description": "[type of message](#DOCS_RESOURCES_CHANNEL/message-object-message-types)"
                    },
                    "activity": {
                        "type": "unknown",
                        "description": "sent with Rich Presence-related chat embeds"
                    },
                    "application": {
                        "$ref": "#/components/schemas/Application",
                        "description": "sent with Rich Presence-related chat embeds"
                    },
                    "application_id": {
                        "type": "string",
                        "description": "if the message is an [Interaction](#DOCS_INTERACTIONS_RECEIVING_AND_RESPONDING/) or application-owned webhook, this is the id of the application"
                    },
                    "message_reference": {
                        "type": "unknown",
                        "description": "data showing the source of a crosspost, channel follow add, pin, or reply message"
                    },
                    "flags": {
                        "type": "integer",
                        "description": "[message flags](#DOCS_RESOURCES_CHANNEL/message-object-message-flags) combined as a [bitfield](https://en.wikipedia.org/wiki/Bit_field)"
                    },
                    "referenced_message": {
                        "$ref": "#/components/schemas/Message",
                        "description": "the message associated with the message_reference"
                    },
                    "interaction": {
                        "type": "unknown",
                        "description": "sent if the message is a response to an [Interaction](#DOCS_INTERACTIONS_RECEIVING_AND_RESPONDING/)"
                    },
                    "thread": {
                        "$ref": "#/components/schemas/Channel",
                        "description": "the thread that was started from this message, includes [thread member](#DOCS_RESOURCES_CHANNEL/thread-member-object) object"
                    },
                    "components": {
                        "$ref": "#/components/schemas/Component",
                        "description": "sent if the message contains components like buttons, action rows, or other interactive components"
                    },
                    "sticker_items": {
                        "$ref": "#/components/schemas/StickerItem",
                        "description": "sent if the message contains stickers"
                    },
                    "stickers": {
                        "$ref": "#/components/schemas/Sticker",
                        "description": "**Deprecated** the stickers sent with the message"
                    },
                    "position": {
                        "type": "integer",
                        "description": "A generally increasing integer (there may be gaps or duplicates) that represents the approximate position of the message in a thread, it can be used to estimate the relative position of the message in a thread in company with `total_message_sent` on parent thread"
                    },
                    "role_subscription_data": {
                        "$ref": "#/components/schemas/RoleSubscriptionData",
                        "description": "data of the role subscription purchase or renewal that prompted this ROLE_SUBSCRIPTION_PURCHASE message"
                    }
                },
                "required": [
                    "id",
                    "channel_id",
                    "author",
                    "content",
                    "timestamp",
                    "edited_timestamp",
                    "tts",
                    "mention_everyone",
                    "mentions",
                    "mention_roles",
                    "mention_channels",
                    "attachments",
                    "embeds",
                    "pinned",
                    "type",
                    "referenced_message",
                    "components"
                ]
            },
            "MessageActivity": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "integer",
                        "description": "[type of message activity](#DOCS_RESOURCES_CHANNEL/message-object-message-activity-types)"
                    },
                    "party_id": {
                        "type": "string",
                        "description": "party_id from a [Rich Presence event](#DOCS_RICH_PRESENCE_HOW_TO/updating-presence-update-presence-payload-fields)"
                    }
                },
                "required": [
                    "type"
                ]
            },
            "MessageReference": {
                "type": "object",
                "properties": {
                    "message_id": {
                        "type": "string",
                        "description": "id of the originating message"
                    },
                    "channel_id ": {
                        "type": "string",
                        "description": "id of the originating message's channel"
                    },
                    "guild_id": {
                        "type": "string",
                        "description": "id of the originating message's guild"
                    },
                    "fail_if_not_exists": {
                        "type": "boolean",
                        "description": "when sending, whether to error if the referenced message doesn't exist instead of sending as a normal (non-reply) message, default true"
                    }
                },
                "required": [
                    "channel_id "
                ]
            },
            "FollowedChannel": {
                "type": "object",
                "properties": {
                    "channel_id": {
                        "type": "string",
                        "description": "source channel id"
                    },
                    "webhook_id": {
                        "type": "string",
                        "description": "created target webhook id"
                    }
                },
                "required": [
                    "channel_id",
                    "webhook_id"
                ]
            },
            "Reaction": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "times this emoji has been used to react"
                    },
                    "me": {
                        "type": "boolean",
                        "description": "whether the current user reacted using this emoji"
                    },
                    "emoji": {
                        "$ref": "#/components/schemas/Emoji",
                        "description": "emoji information"
                    }
                },
                "required": [
                    "count",
                    "me",
                    "emoji"
                ]
            },
            "Overwrite": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "role or user id"
                    },
                    "type": {
                        "type": "int",
                        "description": "either 0 (role) or 1 (member)"
                    },
                    "allow": {
                        "type": "string",
                        "description": "permission bit set"
                    },
                    "deny": {
                        "type": "string",
                        "description": "permission bit set"
                    }
                },
                "required": [
                    "id",
                    "type",
                    "allow",
                    "deny"
                ]
            },
            "ThreadMetadata": {
                "type": "object",
                "properties": {
                    "archived": {
                        "type": "boolean",
                        "description": "whether the thread is archived"
                    },
                    "auto_archive_duration": {
                        "type": "integer",
                        "description": "the thread will stop showing in the channel list after `auto_archive_duration` minutes of inactivity, can be set to: 60, 1440, 4320, 10080"
                    },
                    "archive_timestamp": {
                        "type": "string",
                        "description": "timestamp when the thread's archive status was last changed, used for calculating recent activity",
                        "format": "date-time"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "whether the thread is locked; when a thread is locked, only users with MANAGE_THREADS can unarchive it"
                    },
                    "invitable": {
                        "type": "boolean",
                        "description": "whether non-moderators can add other non-moderators to a thread; only available on private threads"
                    },
                    "create_timestamp": {
                        "type": "string",
                        "description": "timestamp when the thread was created; only populated for threads created after 2022-01-09",
                        "format": "date-time"
                    }
                },
                "required": [
                    "archived",
                    "auto_archive_duration",
                    "archive_timestamp",
                    "locked"
                ]
            },
            "ThreadMember": {
                "type": "object",
                "properties": {
                    "id ": {
                        "type": "string",
                        "description": "ID of the thread"
                    },
                    "user_id ": {
                        "type": "string",
                        "description": "ID of the user"
                    },
                    "join_timestamp": {
                        "type": "string",
                        "description": "Time the user last joined the thread",
                        "format": "date-time"
                    },
                    "flags": {
                        "type": "integer",
                        "description": "Any user-thread settings, currently only used for notifications"
                    },
                    "member  ": {
                        "$ref": "#/components/schemas/GuildMember",
                        "description": "Additional information about the user"
                    }
                },
                "required": [
                    "id ",
                    "user_id ",
                    "join_timestamp",
                    "flags",
                    "member  "
                ]
            },
            "DefaultReaction": {
                "type": "object",
                "properties": {
                    "emoji_id": {
                        "type": "string",
                        "description": "the id of a guild's custom emoji"
                    },
                    "emoji_name": {
                        "type": "string",
                        "description": "the unicode character of the emoji"
                    }
                },
                "required": [
                    "emoji_id",
                    "emoji_name"
                ]
            },
            "ForumTag": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "the id of the tag"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the tag (0-20 characters)"
                    },
                    "moderated": {
                        "type": "boolean",
                        "description": "whether this tag can only be added to or removed from threads by a member with the `MANAGE_THREADS` permission"
                    },
                    "emoji_id": {
                        "type": "string",
                        "description": "the id of a guild's custom emoji \\*"
                    },
                    "emoji_name": {
                        "type": "string",
                        "description": "the unicode character of the emoji \\*"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "moderated",
                    "emoji_id",
                    "emoji_name"
                ]
            },
            "Embed": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "title of embed"
                    },
                    "type": {
                        "type": "string",
                        "description": "[type of embed](#DOCS_RESOURCES_CHANNEL/embed-object-embed-types) (always \"rich\" for webhook embeds)"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of embed"
                    },
                    "url": {
                        "type": "string",
                        "description": "url of embed"
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "timestamp of embed content",
                        "format": "date-time"
                    },
                    "color": {
                        "type": "integer",
                        "description": "color code of the embed"
                    },
                    "footer": {
                        "type": "unknown",
                        "description": "footer information"
                    },
                    "image": {
                        "type": "unknown",
                        "description": "image information"
                    },
                    "thumbnail": {
                        "type": "unknown",
                        "description": "thumbnail information"
                    },
                    "video": {
                        "type": "unknown",
                        "description": "video information"
                    },
                    "provider": {
                        "type": "unknown",
                        "description": "provider information"
                    },
                    "author": {
                        "type": "unknown",
                        "description": "author information"
                    },
                    "fields": {
                        "type": "unknown",
                        "description": "fields information"
                    }
                },
                "required": []
            },
            "EmbedThumbnail": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "description": "source url of thumbnail (only supports http(s) and attachments)"
                    },
                    "proxy_url": {
                        "type": "string",
                        "description": "a proxied url of the thumbnail"
                    },
                    "height": {
                        "type": "integer",
                        "description": "height of thumbnail"
                    },
                    "width": {
                        "type": "integer",
                        "description": "width of thumbnail"
                    }
                },
                "required": [
                    "url"
                ]
            },
            "EmbedVideo": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "description": "source url of video"
                    },
                    "proxy_url": {
                        "type": "string",
                        "description": "a proxied url of the video"
                    },
                    "height": {
                        "type": "integer",
                        "description": "height of video"
                    },
                    "width": {
                        "type": "integer",
                        "description": "width of video"
                    }
                },
                "required": []
            },
            "EmbedImage": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "description": "source url of image (only supports http(s) and attachments)"
                    },
                    "proxy_url": {
                        "type": "string",
                        "description": "a proxied url of the image"
                    },
                    "height": {
                        "type": "integer",
                        "description": "height of image"
                    },
                    "width": {
                        "type": "integer",
                        "description": "width of image"
                    }
                },
                "required": [
                    "url"
                ]
            },
            "EmbedProvider": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "name of provider"
                    },
                    "url": {
                        "type": "string",
                        "description": "url of provider"
                    }
                },
                "required": []
            },
            "EmbedAuthor": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "name of author"
                    },
                    "url": {
                        "type": "string",
                        "description": "url of author (only supports http(s))"
                    },
                    "icon_url": {
                        "type": "string",
                        "description": "url of author icon (only supports http(s) and attachments)"
                    },
                    "proxy_icon_url": {
                        "type": "string",
                        "description": "a proxied url of author icon"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "EmbedFooter": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "footer text"
                    },
                    "icon_url": {
                        "type": "string",
                        "description": "url of footer icon (only supports http(s) and attachments)"
                    },
                    "proxy_icon_url": {
                        "type": "string",
                        "description": "a proxied url of footer icon"
                    }
                },
                "required": [
                    "text"
                ]
            },
            "EmbedField": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "name of the field"
                    },
                    "value": {
                        "type": "string",
                        "description": "value of the field"
                    },
                    "inline": {
                        "type": "boolean",
                        "description": "whether or not this field should display inline"
                    }
                },
                "required": [
                    "name",
                    "value"
                ]
            },
            "Attachment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "attachment id"
                    },
                    "filename": {
                        "type": "string",
                        "description": "name of file attached"
                    },
                    "description": {
                        "type": "string",
                        "description": "description for the file (max 1024 characters)"
                    },
                    "content_type": {
                        "type": "string",
                        "description": "the attachment's [media type](https://en.wikipedia.org/wiki/Media_type)"
                    },
                    "size": {
                        "type": "integer",
                        "description": "size of file in bytes"
                    },
                    "url": {
                        "type": "string",
                        "description": "source url of file"
                    },
                    "proxy_url": {
                        "type": "string",
                        "description": "a proxied url of file"
                    },
                    "height": {
                        "type": "integer",
                        "description": "height of file (if image)"
                    },
                    "width": {
                        "type": "integer",
                        "description": "width of file (if image)"
                    },
                    "ephemeral ": {
                        "type": "boolean",
                        "description": "whether this attachment is ephemeral"
                    },
                    "duration_secs": {
                        "type": "float",
                        "description": "the duration of the audio file (currently for voice messages)"
                    },
                    "waveform": {
                        "type": "string",
                        "description": "base64 encoded bytearray representing a sampled waveform (currently for voice messages)"
                    }
                },
                "required": [
                    "id",
                    "filename",
                    "size",
                    "url",
                    "proxy_url",
                    "ephemeral "
                ]
            },
            "ChannelMention": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the channel"
                    },
                    "guild_id": {
                        "type": "string",
                        "description": "id of the guild containing the channel"
                    },
                    "type": {
                        "type": "integer",
                        "description": "the [type of channel](#DOCS_RESOURCES_CHANNEL/channel-object-channel-types)"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the channel"
                    }
                },
                "required": [
                    "id",
                    "guild_id",
                    "type",
                    "name"
                ]
            },
            "AllowedMentions": {
                "type": "object",
                "properties": {
                    "parse": {
                        "type": "array",
                        "description": "An array of [allowed mention types](#DOCS_RESOURCES_CHANNEL/allowed-mentions-object-allowed-mention-types) to parse from the content.",
                        "items": {
                            "type": "allowed mention type"
                        }
                    },
                    "roles": {
                        "type": "array",
                        "description": "Array of role_ids to mention (Max size of 100)",
                        "items": {
                            "type": "string"
                        }
                    },
                    "users": {
                        "type": "array",
                        "description": "Array of user_ids to mention (Max size of 100)",
                        "items": {
                            "type": "string"
                        }
                    },
                    "replied_user": {
                        "type": "boolean",
                        "description": "For replies, whether to mention the author of the message being replied to (default false)"
                    }
                },
                "required": [
                    "parse",
                    "roles",
                    "users",
                    "replied_user"
                ]
            },
            "RoleSubscriptionDataObject": {
                "type": "object",
                "properties": {
                    "role_subscription_listing_id": {
                        "type": "string",
                        "description": "the id of the sku and listing that the user is subscribed to"
                    },
                    "tier_name": {
                        "type": "string",
                        "description": "the name of the tier that the user is subscribed to"
                    },
                    "total_months_subscribed": {
                        "type": "integer",
                        "description": "the cumulative number of months that the user has been subscribed for"
                    },
                    "is_renewal": {
                        "type": "boolean",
                        "description": "whether this notification is for a renewal rather than a new purchase"
                    }
                },
                "required": [
                    "role_subscription_listing_id",
                    "tier_name",
                    "total_months_subscribed",
                    "is_renewal"
                ]
            },
            "Emoji": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "[emoji id](#DOCS_REFERENCE/image-formatting)"
                    },
                    "name": {
                        "type": "string",
                        "description": "emoji name"
                    },
                    "roles": {
                        "$ref": "#/components/schemas/Role",
                        "description": "roles allowed to use this emoji"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "user that created this emoji"
                    },
                    "require_colons": {
                        "type": "boolean",
                        "description": "whether this emoji must be wrapped in colons"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "whether this emoji is managed"
                    },
                    "animated": {
                        "type": "boolean",
                        "description": "whether this emoji is animated"
                    },
                    "available": {
                        "type": "boolean",
                        "description": "whether this emoji can be used, may be false due to loss of Server Boosts"
                    }
                },
                "required": [
                    "id",
                    "name"
                ]
            },
            "Guild": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "guild id"
                    },
                    "name": {
                        "type": "string",
                        "description": "guild name (2-100 characters, excluding trailing and leading whitespace)"
                    },
                    "icon": {
                        "type": "string",
                        "description": "[icon hash](#DOCS_REFERENCE/image-formatting)"
                    },
                    "icon_hash": {
                        "type": "string",
                        "description": "[icon hash](#DOCS_REFERENCE/image-formatting), returned when in the template object"
                    },
                    "splash": {
                        "type": "string",
                        "description": "[splash hash](#DOCS_REFERENCE/image-formatting)"
                    },
                    "discovery_splash": {
                        "type": "string",
                        "description": "[discovery splash hash](#DOCS_REFERENCE/image-formatting); only present for guilds with the \"DISCOVERABLE\" feature"
                    },
                    "owner ": {
                        "type": "boolean",
                        "description": "true if [the user](#DOCS_RESOURCES_USER/get-current-user-guilds) is the owner of the guild"
                    },
                    "owner_id": {
                        "type": "string",
                        "description": "id of owner"
                    },
                    "permissions ": {
                        "type": "string",
                        "description": "total permissions for [the user](#DOCS_RESOURCES_USER/get-current-user-guilds) in the guild (excludes overwrites)"
                    },
                    "region ": {
                        "type": "string",
                        "description": "[voice region](#DOCS_RESOURCES_VOICE/voice-region-object) id for the guild (deprecated)"
                    },
                    "afk_channel_id": {
                        "type": "string",
                        "description": "id of afk channel"
                    },
                    "afk_timeout": {
                        "type": "integer",
                        "description": "afk timeout in seconds"
                    },
                    "widget_enabled": {
                        "type": "boolean",
                        "description": "true if the server widget is enabled"
                    },
                    "widget_channel_id": {
                        "type": "string",
                        "description": "the channel id that the widget will generate an invite to, or `null` if set to no invite"
                    },
                    "verification_level": {
                        "type": "integer",
                        "description": "[verification level](#DOCS_RESOURCES_GUILD/guild-object-verification-level) required for the guild"
                    },
                    "default_message_notifications": {
                        "type": "integer",
                        "description": "default [message notifications level](#DOCS_RESOURCES_GUILD/guild-object-default-message-notification-level)"
                    },
                    "explicit_content_filter": {
                        "type": "integer",
                        "description": "[explicit content filter level](#DOCS_RESOURCES_GUILD/guild-object-explicit-content-filter-level)"
                    },
                    "roles": {
                        "$ref": "#/components/schemas/Role",
                        "description": "roles in the guild"
                    },
                    "emojis": {
                        "$ref": "#/components/schemas/Emoji",
                        "description": "custom guild emojis"
                    },
                    "features": {
                        "type": "unknown",
                        "description": "enabled guild features"
                    },
                    "mfa_level": {
                        "type": "integer",
                        "description": "required [MFA level](#DOCS_RESOURCES_GUILD/guild-object-mfa-level) for the guild"
                    },
                    "application_id": {
                        "type": "string",
                        "description": "application id of the guild creator if it is bot-created"
                    },
                    "system_channel_id": {
                        "type": "string",
                        "description": "the id of the channel where guild notices such as welcome messages and boost events are posted"
                    },
                    "system_channel_flags": {
                        "type": "integer",
                        "description": "[system channel flags](#DOCS_RESOURCES_GUILD/guild-object-system-channel-flags)"
                    },
                    "rules_channel_id": {
                        "type": "string",
                        "description": "the id of the channel where Community guilds can display rules and/or guidelines"
                    },
                    "max_presences": {
                        "type": "integer",
                        "description": "the maximum number of presences for the guild (`null` is always returned, apart from the largest of guilds)"
                    },
                    "max_members": {
                        "type": "integer",
                        "description": "the maximum number of members for the guild"
                    },
                    "vanity_url_code": {
                        "type": "string",
                        "description": "the vanity url code for the guild"
                    },
                    "description": {
                        "type": "string",
                        "description": "the description of a guild"
                    },
                    "banner": {
                        "type": "string",
                        "description": "[banner hash](#DOCS_REFERENCE/image-formatting)"
                    },
                    "premium_tier": {
                        "type": "integer",
                        "description": "[premium tier](#DOCS_RESOURCES_GUILD/guild-object-premium-tier) (Server Boost level)"
                    },
                    "premium_subscription_count": {
                        "type": "integer",
                        "description": "the number of boosts this guild currently has"
                    },
                    "preferred_locale": {
                        "type": "string",
                        "description": "the preferred [locale](#DOCS_REFERENCE/locales) of a Community guild; used in server discovery and notices from Discord, and sent in interactions; defaults to \"en-US\""
                    },
                    "public_updates_channel_id": {
                        "type": "string",
                        "description": "the id of the channel where admins and moderators of Community guilds receive notices from Discord"
                    },
                    "max_video_channel_users": {
                        "type": "integer",
                        "description": "the maximum amount of users in a video channel"
                    },
                    "max_stage_video_channel_users": {
                        "type": "integer",
                        "description": "the maximum amount of users in a stage video channel"
                    },
                    "approximate_member_count": {
                        "type": "integer",
                        "description": "approximate number of members in this guild, returned from the `GET /guilds/<id>` endpoint when `with_counts` is `true`"
                    },
                    "approximate_presence_count": {
                        "type": "integer",
                        "description": "approximate number of non-offline members in this guild, returned from the `GET /guilds/<id>` endpoint when `with_counts` is `true`"
                    },
                    "welcome_screen": {
                        "$ref": "#/components/schemas/WelcomeScreen",
                        "description": "the welcome screen of a Community guild, shown to new members, returned in an [Invite](#DOCS_RESOURCES_INVITE/invite-object)'s guild object"
                    },
                    "nsfw_level": {
                        "type": "integer",
                        "description": "[guild NSFW level](#DOCS_RESOURCES_GUILD/guild-object-guild-nsfw-level)"
                    },
                    "stickers": {
                        "$ref": "#/components/schemas/Sticker",
                        "description": "custom guild stickers"
                    },
                    "premium_progress_bar_enabled": {
                        "type": "boolean",
                        "description": "whether the guild has the boost progress bar enabled"
                    },
                    "safety_alerts_channel_id": {
                        "type": "string",
                        "description": "the id of the channel where admins and moderators of Community guilds receive safety alerts from Discord"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "icon",
                    "splash",
                    "discovery_splash",
                    "owner ",
                    "owner_id",
                    "permissions ",
                    "region ",
                    "afk_channel_id",
                    "afk_timeout",
                    "verification_level",
                    "default_message_notifications",
                    "explicit_content_filter",
                    "roles",
                    "emojis",
                    "features",
                    "mfa_level",
                    "application_id",
                    "system_channel_id",
                    "system_channel_flags",
                    "rules_channel_id",
                    "vanity_url_code",
                    "description",
                    "banner",
                    "premium_tier",
                    "preferred_locale",
                    "public_updates_channel_id",
                    "nsfw_level",
                    "premium_progress_bar_enabled",
                    "safety_alerts_channel_id"
                ]
            },
            "GuildPreview": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "guild id"
                    },
                    "name": {
                        "type": "string",
                        "description": "guild name (2-100 characters)"
                    },
                    "icon": {
                        "type": "string",
                        "description": "[icon hash](#DOCS_REFERENCE/image-formatting)"
                    },
                    "splash": {
                        "type": "string",
                        "description": "[splash hash](#DOCS_REFERENCE/image-formatting)"
                    },
                    "discovery_splash": {
                        "type": "string",
                        "description": "[discovery splash hash](#DOCS_REFERENCE/image-formatting)"
                    },
                    "emojis": {
                        "$ref": "#/components/schemas/Emoji",
                        "description": "custom guild emojis"
                    },
                    "features": {
                        "type": "unknown",
                        "description": "enabled guild features"
                    },
                    "approximate_member_count": {
                        "type": "integer",
                        "description": "approximate number of members in this guild"
                    },
                    "approximate_presence_count": {
                        "type": "integer",
                        "description": "approximate number of online members in this guild"
                    },
                    "description": {
                        "type": "string",
                        "description": "the description for the guild"
                    },
                    "stickers": {
                        "$ref": "#/components/schemas/Sticker",
                        "description": "custom guild stickers"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "icon",
                    "splash",
                    "discovery_splash",
                    "emojis",
                    "features",
                    "approximate_member_count",
                    "approximate_presence_count",
                    "description",
                    "stickers"
                ]
            },
            "GuildWidgetSettings": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "whether the widget is enabled"
                    },
                    "channel_id": {
                        "type": "string",
                        "description": "the widget channel id"
                    }
                },
                "required": [
                    "enabled",
                    "channel_id"
                ]
            },
            "GuildWidget": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "guild id"
                    },
                    "name": {
                        "type": "string",
                        "description": "guild name (2-100 characters)"
                    },
                    "instant_invite": {
                        "type": "string",
                        "description": "instant invite for the guilds specified widget invite channel"
                    },
                    "channels": {
                        "$ref": "#/components/schemas/Channel",
                        "description": "voice and stage channels which are accessible by @everyone"
                    },
                    "members": {
                        "$ref": "#/components/schemas/User",
                        "description": "special widget user objects that includes users presence (Limit 100)"
                    },
                    "presence_count": {
                        "type": "integer",
                        "description": "number of online members in this guild"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "instant_invite",
                    "channels",
                    "members",
                    "presence_count"
                ]
            },
            "GuildMember": {
                "type": "object",
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "the user this guild member represents"
                    },
                    "nick": {
                        "type": "string",
                        "description": "this user's guild nickname"
                    },
                    "avatar": {
                        "type": "string",
                        "description": "the member's [guild avatar hash](#DOCS_REFERENCE/image-formatting)"
                    },
                    "roles": {
                        "type": "array",
                        "description": "array of [role](#DOCS_TOPICS_PERMISSIONS/role-object) object ids",
                        "items": {
                            "type": "string"
                        }
                    },
                    "joined_at": {
                        "type": "string",
                        "description": "when the user joined the guild",
                        "format": "date-time"
                    },
                    "premium_since": {
                        "type": "string",
                        "description": "when the user started [boosting](https://support.discord.com/hc/en-us/articles/360028038352-Server-Boosting-) the guild",
                        "format": "date-time"
                    },
                    "deaf": {
                        "type": "boolean",
                        "description": "whether the user is deafened in voice channels"
                    },
                    "mute": {
                        "type": "boolean",
                        "description": "whether the user is muted in voice channels"
                    },
                    "flags": {
                        "type": "integer",
                        "description": "[guild member flags](#DOCS_RESOURCES_GUILD/guild-member-object-guild-member-flags) represented as a bit set, defaults to `0`"
                    },
                    "pending": {
                        "type": "boolean",
                        "description": "whether the user has not yet passed the guild's [Membership Screening](#DOCS_RESOURCES_GUILD/membership-screening-object) requirements"
                    },
                    "permissions": {
                        "type": "string",
                        "description": "total permissions of the member in the channel, including overwrites, returned when in the interaction object"
                    },
                    "communication_disabled_until": {
                        "type": "string",
                        "description": "when the user's [timeout](https://support.discord.com/hc/en-us/articles/4413305239191-Time-Out-FAQ) will expire and the user will be able to communicate in the guild again, null or a time in the past if the user is not timed out",
                        "format": "date-time"
                    }
                },
                "required": [
                    "roles",
                    "joined_at",
                    "deaf",
                    "mute",
                    "flags"
                ]
            },
            "Integration": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "integration id"
                    },
                    "name": {
                        "type": "string",
                        "description": "integration name"
                    },
                    "type": {
                        "type": "string",
                        "description": "integration type (twitch, youtube, discord, or guild_subscription)"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "is this integration enabled"
                    },
                    "syncing ": {
                        "type": "boolean",
                        "description": "is this integration syncing"
                    },
                    "role_id ": {
                        "type": "string",
                        "description": "id that this integration uses for \"subscribers\""
                    },
                    "enable_emoticons ": {
                        "type": "boolean",
                        "description": "whether emoticons should be synced for this integration (twitch only currently)"
                    },
                    "expire_behavior ": {
                        "type": "unknown",
                        "description": "the behavior of expiring subscribers"
                    },
                    "expire_grace_period ": {
                        "type": "integer",
                        "description": "the grace period (in days) before expiring subscribers"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "user for this integration"
                    },
                    "account": {
                        "$ref": "#/components/schemas/IntegrationAccount",
                        "description": "integration account information"
                    },
                    "synced_at ": {
                        "type": "string",
                        "description": "when this integration was last synced",
                        "format": "date-time"
                    },
                    "subscriber_count ": {
                        "type": "integer",
                        "description": "how many subscribers this integration has"
                    },
                    "revoked ": {
                        "type": "boolean",
                        "description": "has this integration been revoked"
                    },
                    "application": {
                        "$ref": "#/components/schemas/IntegrationApplication",
                        "description": "The bot/OAuth2 application for discord integrations"
                    },
                    "scopes": {
                        "type": "unknown",
                        "description": "the scopes the application has been authorized for"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "type",
                    "enabled",
                    "syncing ",
                    "role_id ",
                    "enable_emoticons ",
                    "expire_behavior ",
                    "expire_grace_period ",
                    "account",
                    "synced_at ",
                    "subscriber_count ",
                    "revoked "
                ]
            },
            "IntegrationAccount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the account"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the account"
                    }
                },
                "required": [
                    "id",
                    "name"
                ]
            },
            "IntegrationApplication": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "the id of the app"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the app"
                    },
                    "icon": {
                        "type": "string",
                        "description": "the [icon hash](#DOCS_REFERENCE/image-formatting) of the app"
                    },
                    "description": {
                        "type": "string",
                        "description": "the description of the app"
                    },
                    "bot": {
                        "$ref": "#/components/schemas/User",
                        "description": "the bot associated with this application"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "icon",
                    "description"
                ]
            },
            "Ban": {
                "type": "object",
                "properties": {
                    "reason": {
                        "type": "string",
                        "description": "the reason for the ban"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "the banned user"
                    }
                },
                "required": [
                    "reason",
                    "user"
                ]
            },
            "WelcomeScreen": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "the server description shown in the welcome screen"
                    },
                    "welcome_channels": {
                        "type": "unknown",
                        "description": "the channels shown in the welcome screen, up to 5"
                    }
                },
                "required": [
                    "description",
                    "welcome_channels"
                ]
            },
            "WelcomeScreenChannel": {
                "type": "object",
                "properties": {
                    "channel_id": {
                        "type": "string",
                        "description": "the channel's id"
                    },
                    "description": {
                        "type": "string",
                        "description": "the description shown for the channel"
                    },
                    "emoji_id": {
                        "type": "string",
                        "description": "the [emoji id](#DOCS_REFERENCE/image-formatting), if the emoji is custom"
                    },
                    "emoji_name": {
                        "type": "string",
                        "description": "the emoji name if custom, the unicode character if standard, or `null` if no emoji is set"
                    }
                },
                "required": [
                    "channel_id",
                    "description",
                    "emoji_id",
                    "emoji_name"
                ]
            },
            "GuildOnboarding": {
                "type": "object",
                "properties": {
                    "guild_id": {
                        "type": "string",
                        "description": "ID of the guild this onboarding is part of"
                    },
                    "prompts": {
                        "type": "unknown",
                        "description": "Prompts shown during onboarding and in customize community"
                    },
                    "default_channel_ids": {
                        "type": "array",
                        "description": "Channel IDs that members get opted into automatically",
                        "items": {
                            "type": "string"
                        }
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether onboarding is enabled in the guild"
                    }
                },
                "required": [
                    "guild_id",
                    "prompts",
                    "default_channel_ids",
                    "enabled"
                ]
            },
            "OnboardingPrompt": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the prompt"
                    },
                    "type": {
                        "type": "unknown",
                        "description": "Type of prompt"
                    },
                    "options": {
                        "type": "unknown",
                        "description": "Options available within the prompt"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the prompt"
                    },
                    "single_select": {
                        "type": "boolean",
                        "description": "Indicates whether users are limited to selecting one option for the prompt"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Indicates whether the prompt is required before a user completes the onboarding flow"
                    },
                    "in_onboarding": {
                        "type": "boolean",
                        "description": "Indicates whether the prompt is present in the onboarding flow. If `false`, the prompt will only appear in the Channels & Roles tab"
                    }
                },
                "required": [
                    "id",
                    "type",
                    "options",
                    "title",
                    "single_select",
                    "required",
                    "in_onboarding"
                ]
            },
            "PromptOption": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the prompt option"
                    },
                    "channel_ids": {
                        "type": "array",
                        "description": "IDs for channels a member is added to when the option is selected",
                        "items": {
                            "type": "string"
                        }
                    },
                    "role_ids": {
                        "type": "array",
                        "description": "IDs for roles assigned to a member when the option is selected",
                        "items": {
                            "type": "string"
                        }
                    },
                    "emoji": {
                        "$ref": "#/components/schemas/Emoji",
                        "description": "Emoji of the option"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the option"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the option"
                    }
                },
                "required": [
                    "id",
                    "channel_ids",
                    "role_ids",
                    "emoji",
                    "title",
                    "description"
                ]
            },
            "GuildScheduledEvent": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "the id of the scheduled event"
                    },
                    "guild_id": {
                        "type": "string",
                        "description": "the guild id which the scheduled event belongs to"
                    },
                    "channel_id **": {
                        "type": "string",
                        "description": "the channel id in which the scheduled event will be hosted, or `null` if [scheduled entity type](#DOCS_RESOURCES_GUILD_SCHEDULED_EVENT/guild-scheduled-event-object-guild-scheduled-event-entity-types) is `EXTERNAL`"
                    },
                    "creator_id *": {
                        "type": "string",
                        "description": "the id of the user that created the scheduled event *"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the scheduled event (1-100 characters)"
                    },
                    "description": {
                        "type": "string",
                        "description": "the description of the scheduled event (1-1000 characters)"
                    },
                    "scheduled_start_time": {
                        "type": "string",
                        "description": "the time the scheduled event will start",
                        "format": "date-time"
                    },
                    "scheduled_end_time **": {
                        "type": "string",
                        "description": "the time the scheduled event will end, required if entity_type is `EXTERNAL`",
                        "format": "date-time"
                    },
                    "privacy_level": {
                        "type": "unknown",
                        "description": "the privacy level of the scheduled event"
                    },
                    "status": {
                        "type": "unknown",
                        "description": "the status of the scheduled event"
                    },
                    "entity_type": {
                        "type": "unknown",
                        "description": "the type of the scheduled event"
                    },
                    "entity_id": {
                        "type": "string",
                        "description": "the id of an entity associated with a guild scheduled event"
                    },
                    "entity_metadata **": {
                        "type": "unknown",
                        "description": "additional metadata for the guild scheduled event"
                    },
                    "creator": {
                        "$ref": "#/components/schemas/User",
                        "description": "the user that created the scheduled event"
                    },
                    "user_count": {
                        "type": "integer",
                        "description": "the number of users subscribed to the scheduled event"
                    },
                    "image": {
                        "type": "string",
                        "description": "the [cover image hash](#DOCS_REFERENCE/image-formatting) of the scheduled event"
                    }
                },
                "required": [
                    "id",
                    "guild_id",
                    "channel_id **",
                    "creator_id *",
                    "name",
                    "scheduled_start_time",
                    "scheduled_end_time **",
                    "privacy_level",
                    "status",
                    "entity_type",
                    "entity_id",
                    "entity_metadata **"
                ]
            },
            "GuildScheduledEventUser": {
                "type": "object",
                "properties": {
                    "guild_scheduled_event_id": {
                        "type": "string",
                        "description": "the scheduled event id which the user subscribed to"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "user which subscribed to an event"
                    },
                    "member": {
                        "$ref": "#/components/schemas/GuildMember",
                        "description": "guild member data for this user for the guild which this event belongs to, if any"
                    }
                },
                "required": [
                    "guild_scheduled_event_id",
                    "user"
                ]
            },
            "GuildTemplate": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "the template code (unique ID)"
                    },
                    "name": {
                        "type": "string",
                        "description": "template name"
                    },
                    "description": {
                        "type": "string",
                        "description": "the description for the template"
                    },
                    "usage_count": {
                        "type": "integer",
                        "description": "number of times this template has been used"
                    },
                    "creator_id": {
                        "type": "string",
                        "description": "the ID of the user who created the template"
                    },
                    "creator": {
                        "$ref": "#/components/schemas/User",
                        "description": "the user who created the template"
                    },
                    "created_at": {
                        "type": "string",
                        "description": "when this template was created",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "description": "when this template was last synced to the source guild",
                        "format": "date-time"
                    },
                    "source_guild_id": {
                        "type": "string",
                        "description": "the ID of the guild this template is based on"
                    },
                    "serialized_source_guild": {
                        "$ref": "#/components/schemas/Guild",
                        "description": "the guild snapshot this template contains"
                    },
                    "is_dirty": {
                        "type": "boolean",
                        "description": "whether the template has unsynced changes"
                    }
                },
                "required": [
                    "code",
                    "name",
                    "description",
                    "usage_count",
                    "creator_id",
                    "creator",
                    "created_at",
                    "updated_at",
                    "source_guild_id",
                    "serialized_source_guild",
                    "is_dirty"
                ]
            },
            "Invite": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "the invite code (unique ID)"
                    },
                    "guild": {
                        "$ref": "#/components/schemas/Guild",
                        "description": "the guild this invite is for"
                    },
                    "channel": {
                        "$ref": "#/components/schemas/Channel",
                        "description": "the channel this invite is for"
                    },
                    "inviter": {
                        "$ref": "#/components/schemas/User",
                        "description": "the user who created the invite"
                    },
                    "target_type": {
                        "type": "integer",
                        "description": "the [type of target](#DOCS_RESOURCES_INVITE/invite-object-invite-target-types) for this voice channel invite"
                    },
                    "target_user": {
                        "$ref": "#/components/schemas/User",
                        "description": "the user whose stream to display for this voice channel stream invite"
                    },
                    "target_application": {
                        "$ref": "#/components/schemas/Application",
                        "description": "the embedded application to open for this voice channel embedded application invite"
                    },
                    "approximate_presence_count": {
                        "type": "integer",
                        "description": "approximate count of online members, returned from the `GET /invites/<code>` endpoint when `with_counts` is `true`"
                    },
                    "approximate_member_count": {
                        "type": "integer",
                        "description": "approximate count of total members, returned from the `GET /invites/<code>` endpoint when `with_counts` is `true`"
                    },
                    "expires_at": {
                        "type": "string",
                        "description": "the expiration date of this invite, returned from the `GET /invites/<code>` endpoint when `with_expiration` is `true`",
                        "format": "date-time"
                    },
                    "stage_instance": {
                        "$ref": "#/components/schemas/InviteStageInstance",
                        "description": "stage instance data if there is a [public Stage instance](#DOCS_RESOURCES_STAGE_INSTANCE) in the Stage channel this invite is for (deprecated)"
                    },
                    "guild_scheduled_event": {
                        "$ref": "#/components/schemas/GuildScheduledEvent",
                        "description": "guild scheduled event data, only included if `guild_scheduled_event_id` contains a valid guild scheduled event id"
                    }
                },
                "required": [
                    "code",
                    "channel"
                ]
            },
            "InviteMetadata": {
                "type": "object",
                "properties": {
                    "uses": {
                        "type": "integer",
                        "description": "number of times this invite has been used"
                    },
                    "max_uses": {
                        "type": "integer",
                        "description": "max number of times this invite can be used"
                    },
                    "max_age": {
                        "type": "integer",
                        "description": "duration (in seconds) after which the invite expires"
                    },
                    "temporary": {
                        "type": "boolean",
                        "description": "whether this invite only grants temporary membership"
                    },
                    "created_at": {
                        "type": "string",
                        "description": "when this invite was created",
                        "format": "date-time"
                    }
                },
                "required": [
                    "uses",
                    "max_uses",
                    "max_age",
                    "temporary",
                    "created_at"
                ]
            },
            "InviteStageInstance": {
                "type": "object",
                "properties": {
                    "members": {
                        "$ref": "#/components/schemas/GuildMember",
                        "description": "the members speaking in the Stage"
                    },
                    "participant_count": {
                        "type": "integer",
                        "description": "the number of users in the Stage"
                    },
                    "speaker_count": {
                        "type": "integer",
                        "description": "the number of users speaking in the Stage"
                    },
                    "topic": {
                        "type": "string",
                        "description": "the topic of the Stage instance (1-120 characters)"
                    }
                },
                "required": [
                    "members",
                    "participant_count",
                    "speaker_count",
                    "topic"
                ]
            },
            "StageInstance": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of this Stage instance"
                    },
                    "guild_id": {
                        "type": "string",
                        "description": "The guild id of the associated Stage channel"
                    },
                    "channel_id": {
                        "type": "string",
                        "description": "The id of the associated Stage channel"
                    },
                    "topic": {
                        "type": "string",
                        "description": "The topic of the Stage instance (1-120 characters)"
                    },
                    "privacy_level": {
                        "type": "integer",
                        "description": "The [privacy level](#DOCS_RESOURCES_STAGE_INSTANCE/stage-instance-object-privacy-level) of the Stage instance"
                    },
                    "discoverable_disabled": {
                        "type": "boolean",
                        "description": "Whether or not Stage Discovery is disabled (deprecated)"
                    },
                    "guild_scheduled_event_id": {
                        "type": "string",
                        "description": "The id of the scheduled event for this Stage instance"
                    }
                },
                "required": [
                    "id",
                    "guild_id",
                    "channel_id",
                    "topic",
                    "privacy_level",
                    "discoverable_disabled",
                    "guild_scheduled_event_id"
                ]
            },
            "Sticker": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "[id of the sticker](#DOCS_REFERENCE/image-formatting)"
                    },
                    "pack_id": {
                        "type": "string",
                        "description": "for standard stickers, id of the pack the sticker is from"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the sticker"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of the sticker"
                    },
                    "tags": {
                        "type": "string",
                        "description": "autocomplete/suggestion tags for the sticker (max 200 characters)"
                    },
                    "asset": {
                        "type": "string",
                        "description": "**Deprecated** previously the sticker asset hash, now an empty string"
                    },
                    "type": {
                        "type": "integer",
                        "description": "[type of sticker](#DOCS_RESOURCES_STICKER/sticker-object-sticker-types)"
                    },
                    "format_type": {
                        "type": "integer",
                        "description": "[type of sticker format](#DOCS_RESOURCES_STICKER/sticker-object-sticker-format-types)"
                    },
                    "available": {
                        "type": "boolean",
                        "description": "whether this guild sticker can be used, may be false due to loss of Server Boosts"
                    },
                    "guild_id": {
                        "type": "string",
                        "description": "id of the guild that owns this sticker"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "the user that uploaded the guild sticker"
                    },
                    "sort_value": {
                        "type": "integer",
                        "description": "the standard sticker's sort order within its pack"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "description",
                    "tags",
                    "type",
                    "format_type"
                ]
            },
            "StickerItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the sticker"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the sticker"
                    },
                    "format_type": {
                        "type": "integer",
                        "description": "[type of sticker format](#DOCS_RESOURCES_STICKER/sticker-object-sticker-format-types)"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "format_type"
                ]
            },
            "StickerPack": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the sticker pack"
                    },
                    "stickers": {
                        "$ref": "#/components/schemas/Sticker",
                        "description": "the stickers in the pack"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the sticker pack"
                    },
                    "sku_id": {
                        "type": "string",
                        "description": "id of the pack's SKU"
                    },
                    "cover_sticker_id": {
                        "type": "string",
                        "description": "id of a sticker in the pack which is shown as the pack's icon"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of the sticker pack"
                    },
                    "banner_asset_id": {
                        "type": "string",
                        "description": "id of the sticker pack's [banner image](#DOCS_REFERENCE/image-formatting)"
                    }
                },
                "required": [
                    "id",
                    "stickers",
                    "name",
                    "sku_id",
                    "description"
                ]
            },
            "Response": {
                "type": "object",
                "properties": {
                    "sticker_packs": {
                        "$ref": "#/components/schemas/StickerPack"
                    }
                },
                "required": [
                    "sticker_packs"
                ]
            },
            "User": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "the user's id"
                    },
                    "username": {
                        "type": "string",
                        "description": "the user's username, not unique across the platform"
                    },
                    "discriminator": {
                        "type": "string",
                        "description": "the user's 4-digit discord-tag"
                    },
                    "avatar": {
                        "type": "string",
                        "description": "the user's [avatar hash](#DOCS_REFERENCE/image-formatting)"
                    },
                    "bot": {
                        "type": "boolean",
                        "description": "whether the user belongs to an OAuth2 application"
                    },
                    "system": {
                        "type": "boolean",
                        "description": "whether the user is an Official Discord System user (part of the urgent message system)"
                    },
                    "mfa_enabled": {
                        "type": "boolean",
                        "description": "whether the user has two factor enabled on their account"
                    },
                    "banner": {
                        "type": "string",
                        "description": "the user's [banner hash](#DOCS_REFERENCE/image-formatting)"
                    },
                    "accent_color": {
                        "type": "integer",
                        "description": "the user's banner color encoded as an integer representation of hexadecimal color code"
                    },
                    "locale": {
                        "type": "string",
                        "description": "the user's chosen [language option](#DOCS_REFERENCE/locales)"
                    },
                    "verified": {
                        "type": "boolean",
                        "description": "whether the email on this account has been verified"
                    },
                    "email": {
                        "type": "string",
                        "description": "the user's email"
                    },
                    "flags": {
                        "type": "integer",
                        "description": "the [flags](#DOCS_RESOURCES_USER/user-object-user-flags) on a user's account"
                    },
                    "premium_type": {
                        "type": "integer",
                        "description": "the [type of Nitro subscription](#DOCS_RESOURCES_USER/user-object-premium-types) on a user's account"
                    },
                    "public_flags": {
                        "type": "integer",
                        "description": "the public [flags](#DOCS_RESOURCES_USER/user-object-user-flags) on a user's account"
                    }
                },
                "required": [
                    "id",
                    "username",
                    "discriminator",
                    "avatar"
                ]
            },
            "Connection": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "id of the connection account"
                    },
                    "name": {
                        "type": "string",
                        "description": "the username of the connection account"
                    },
                    "type": {
                        "type": "string",
                        "description": "the [service](#DOCS_RESOURCES_USER/connection-object-services) of this connection"
                    },
                    "revoked": {
                        "type": "boolean",
                        "description": "whether the connection is revoked"
                    },
                    "integrations": {
                        "type": "array",
                        "description": "an array of partial [server integrations](#DOCS_RESOURCES_GUILD/integration-object)"
                    },
                    "verified": {
                        "type": "boolean",
                        "description": "whether the connection is verified"
                    },
                    "friend_sync": {
                        "type": "boolean",
                        "description": "whether friend sync is enabled for this connection"
                    },
                    "show_activity": {
                        "type": "boolean",
                        "description": "whether activities related to this connection will be shown in presence updates"
                    },
                    "two_way_link": {
                        "type": "boolean",
                        "description": "whether this connection has a corresponding third party OAuth2 token"
                    },
                    "visibility": {
                        "type": "integer",
                        "description": "[visibility](#DOCS_RESOURCES_USER/connection-object-visibility-types) of this connection"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "type",
                    "verified",
                    "friend_sync",
                    "show_activity",
                    "two_way_link",
                    "visibility"
                ]
            },
            "ApplicationRoleConnection": {
                "type": "object",
                "properties": {
                    "platform_name": {
                        "type": "string",
                        "description": "the vanity name of the platform a bot has connected (max 50 characters)"
                    },
                    "platform_username": {
                        "type": "string",
                        "description": "the username on the platform a bot has connected (max 100 characters)"
                    },
                    "metadata": {
                        "type": "object",
                        "description": "object mapping [application role connection metadata](#DOCS_RESOURCES_APPLICATION_ROLE_CONNECTION_METADATA/application-role-connection-metadata-object) keys to their `string`-ified value (max 100 characters) for the user on the platform a bot has connected"
                    }
                },
                "required": [
                    "platform_name",
                    "platform_username",
                    "metadata"
                ]
            },
            "VoiceState": {
                "type": "object",
                "properties": {
                    "guild_id": {
                        "type": "string",
                        "description": "the guild id this voice state is for"
                    },
                    "channel_id": {
                        "type": "string",
                        "description": "the channel id this user is connected to"
                    },
                    "user_id": {
                        "type": "string",
                        "description": "the user id this voice state is for"
                    },
                    "member": {
                        "$ref": "#/components/schemas/GuildMember",
                        "description": "the guild member this voice state is for"
                    },
                    "session_id": {
                        "type": "string",
                        "description": "the session id for this voice state"
                    },
                    "deaf": {
                        "type": "boolean",
                        "description": "whether this user is deafened by the server"
                    },
                    "mute": {
                        "type": "boolean",
                        "description": "whether this user is muted by the server"
                    },
                    "self_deaf": {
                        "type": "boolean",
                        "description": "whether this user is locally deafened"
                    },
                    "self_mute": {
                        "type": "boolean",
                        "description": "whether this user is locally muted"
                    },
                    "self_stream": {
                        "type": "boolean",
                        "description": "whether this user is streaming using \"Go Live\""
                    },
                    "self_video": {
                        "type": "boolean",
                        "description": "whether this user's camera is enabled"
                    },
                    "suppress": {
                        "type": "boolean",
                        "description": "whether this user's permission to speak is denied"
                    },
                    "request_to_speak_timestamp": {
                        "type": "string",
                        "description": "the time at which the user requested to speak",
                        "format": "date-time"
                    }
                },
                "required": [
                    "channel_id",
                    "user_id",
                    "session_id",
                    "deaf",
                    "mute",
                    "self_deaf",
                    "self_mute",
                    "self_video",
                    "suppress",
                    "request_to_speak_timestamp"
                ]
            },
            "VoiceRegion": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "unique ID for the region"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the region"
                    },
                    "optimal": {
                        "type": "boolean",
                        "description": "true for a single server that is closest to the current user's client"
                    },
                    "custom": {
                        "type": "boolean",
                        "description": "whether this is a custom voice region (used for events/etc)"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "optimal",
                    "custom"
                ]
            },
            "Webhook": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "the id of the webhook"
                    },
                    "type": {
                        "type": "integer",
                        "description": "the [type](#DOCS_RESOURCES_WEBHOOK/webhook-object-webhook-types) of the webhook"
                    },
                    "guild_id": {
                        "type": "string",
                        "description": "the guild id this webhook is for, if any"
                    },
                    "channel_id": {
                        "type": "string",
                        "description": "the channel id this webhook is for, if any"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "the user this webhook was created by (not returned when getting a webhook with its token)"
                    },
                    "name": {
                        "type": "string",
                        "description": "the default name of the webhook"
                    },
                    "avatar": {
                        "type": "string",
                        "description": "the default user avatar [hash](#DOCS_REFERENCE/image-formatting) of the webhook"
                    },
                    "token": {
                        "type": "string",
                        "description": "the secure token of the webhook (returned for Incoming Webhooks)"
                    },
                    "application_id": {
                        "type": "string",
                        "description": "the bot/OAuth2 application that created this webhook"
                    },
                    "source_guild *": {
                        "$ref": "#/components/schemas/Guild",
                        "description": "the guild of the channel that this webhook is following (returned for Channel Follower Webhooks)"
                    },
                    "source_channel *": {
                        "$ref": "#/components/schemas/Channel",
                        "description": "the channel that this webhook is following (returned for Channel Follower Webhooks)"
                    },
                    "url": {
                        "type": "string",
                        "description": "the url used for executing the webhook (returned by the [webhooks](#DOCS_TOPICS_OAUTH2/webhooks) OAuth2 flow)"
                    }
                },
                "required": [
                    "id",
                    "type",
                    "channel_id",
                    "name",
                    "avatar",
                    "application_id",
                    "source_guild *",
                    "source_channel *"
                ]
            }
        }
    },
    "info": {
        "title": "Discord API",
        "version": "10.0.0"
    },
    "openapi": "3.0.0",
    "paths": {
        "/applications/{application_id}/role-connections/metadata": {
            "get": {
                "description": "Returns a list of application role connection metadata objects for the given application.",
                "operationId": "getApplicationsRoleConnectionsMetadata",
                "parameters": [
                    {
                        "name": "application_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApplicationRoleConnectionMetadata"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/audit-logs": {
            "get": {
                "description": "Returns an audit log object for the guild. Requires the `VIEW_AUDIT_LOG` permission.\r",
                "operationId": "getGuildsAuditLogs",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuditLog"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/auto-moderation/rules": {
            "get": {
                "description": "Get a list of all rules currently configured for the guild. Returns a list of auto moderation rule objects for the given guild.\r",
                "operationId": "getGuildsAutoModerationRules",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AutoModerationRule"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new rule. Returns an auto moderation rule on success. Fires an Auto Moderation Rule Create Gateway event.\r",
                "operationId": "postGuildsAutoModerationRules",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutoModerationRule"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/auto-moderation/rules/{auto_moderation_rule_id}": {
            "patch": {
                "description": "Modify an existing rule. Returns an auto moderation rule on success. Fires an Auto Moderation Rule Update Gateway event.\r",
                "operationId": "patchGuildsAutoModerationRule",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "auto_moderation_rule_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutoModerationRule"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a rule. Returns a `204` on success. Fires an Auto Moderation Rule Delete Gateway event.\r",
                "operationId": "deleteGuildsAutoModerationRule",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "auto_moderation_rule_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/channels/{channel_id}": {
            "get": {
                "description": "Get a channel by ID. Returns a channel object.  If the channel is a thread, a thread member object is included in the returned result.",
                "operationId": "getChannel",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Channel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/channels/{channel_id}/messages": {
            "get": {
                "description": "Retrieves the messages in a channel. Returns an array of message objects on success.\r",
                "operationId": "getChannelsMessages",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Message"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/channels/{channel_id}/messages/{message_id}": {
            "get": {
                "description": "Retrieves a specific message in the channel. Returns a message object on success.\r",
                "operationId": "getChannelsMessage",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "message_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "description": "Edit a previously sent message. The fields `content`, `embeds`, and `flags` can be edited by the original message author. Other users can only edit `flags` and only if they have the `MANAGE_MESSAGES` permission in the corresponding channel. When specifying flags, ensure to include all previously set flags/bits in addition to ones that you are modifying. Only `flags` documented in the table below may be modified by users (unsupported flag changes are currently ignored without error).\r",
                "operationId": "patchChannelsMessage",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "message_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a message. If operating on a guild channel and trying to delete a message that was not sent by the current user, this endpoint requires the `MANAGE_MESSAGES` permission. Returns a 204 empty response on success. Fires a Message Delete Gateway event.\r",
                "operationId": "deleteChannelsMessage",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "message_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/channels/{channel_id}/messages/{message_id}/crosspost": {
            "post": {
                "description": "Crosspost a message in an Announcement Channel to following channels. This endpoint requires the `SEND_MESSAGES` permission, if the current user sent the message, or additionally the `MANAGE_MESSAGES` permission, for all other messages, to be present for the current user.\r",
                "operationId": "postChannelsMessagesCrosspost",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "message_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/channels/{channel_id}/messages/{message_id}/reactions/{emoji}/@me": {
            "delete": {
                "description": "Delete a reaction the current user has made for the message. Returns a 204 empty response on success. Fires a Message Reaction Remove Gateway event.\r",
                "operationId": "deleteChannelsMessagesReactionsMe",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "message_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "emoji",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/channels/{channel_id}/messages/{message_id}/reactions/{emoji}": {
            "get": {
                "description": "Get a list of users that reacted with this emoji. Returns an array of user objects on success.\r",
                "operationId": "getChannelsMessagesReaction",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "message_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "emoji",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/channels/{channel_id}/messages/{message_id}/reactions": {
            "delete": {
                "description": "Deletes all reactions on a message. This endpoint requires the `MANAGE_MESSAGES` permission to be present on the current user. Fires a Message Reaction Remove All Gateway event.",
                "operationId": "deleteChannelsMessagesReactions",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "message_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/channels/{channel_id}/permissions/{overwrite_id}": {
            "put": {
                "description": "Edit the channel permission overwrites for a user or role in a channel. Only usable for guild channels. Requires the `MANAGE_ROLES` permission. Only permissions your bot has in the guild or parent channel (if applicable) can be allowed/denied (unless your bot has a `MANAGE_ROLES` overwrite in the channel). Returns a 204 empty response on success. Fires a Channel Update Gateway event. For more information about permissions, see permissions.\r",
                "operationId": "putChannelsPermission",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "overwrite_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a channel permission overwrite for a user or role in a channel. Only usable for guild channels. Requires the `MANAGE_ROLES` permission. Returns a 204 empty response on success. Fires a Channel Update Gateway event. For more information about permissions, see permissions\r",
                "operationId": "deleteChannelsPermission",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "overwrite_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/channels/{channel_id}/invites": {
            "get": {
                "description": "Returns a list of invite objects (with invite metadata) for the channel. Only usable for guild channels. Requires the `MANAGE_CHANNELS` permission.",
                "operationId": "getChannelsInvites",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Invite"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/channels/{channel_id}/typing": {
            "post": {
                "description": "Post a typing indicator for the specified channel. Generally bots should **not** implement this route. However, if a bot is responding to a command and expects the computation to take a few seconds, this endpoint may be called to let the user know that the bot is processing their message. Returns a 204 empty response on success. Fires a Typing Start Gateway event.",
                "operationId": "postChannelsTyping",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/channels/{channel_id}/pins/{message_id}": {
            "put": {
                "description": "Pin a message in a channel. Requires the `MANAGE_MESSAGES` permission. Returns a 204 empty response on success. Fires a Channel Pins Update Gateway event.\r",
                "operationId": "putChannelsPin",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "message_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/channels/{channel_id}/recipients/{user_id}": {
            "put": {
                "description": "Adds a recipient to a Group DM using their access token.",
                "operationId": "putChannelsRecipient",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Removes a recipient from a Group DM.",
                "operationId": "deleteChannelsRecipient",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/channels/{channel_id}/threads": {
            "post": {
                "description": "Creates a new thread in a forum channel, and sends a message within the created thread. Returns a channel, with a nested message object, on success, and a 400 BAD REQUEST on invalid parameters. Fires a Thread Create and Message Create Gateway event.\r",
                "operationId": "postChannelsThreads",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Channel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/channels/{channel_id}/thread-members/@me": {
            "put": {
                "description": "Adds the current user to a thread. Also requires the thread is not archived. Returns a 204 empty response on success. Fires a Thread Members Update and a Thread Create Gateway event.",
                "operationId": "putChannelsThreadMembersMe",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Removes the current user from a thread. Also requires the thread is not archived. Returns a 204 empty response on success. Fires a Thread Members Update Gateway event.",
                "operationId": "deleteChannelsThreadMembersMe",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/channels/{channel_id}/thread-members/{user_id}": {
            "get": {
                "description": "Returns a thread member object for the specified user if they are a member of the thread, returns a 404 response otherwise.\r",
                "operationId": "getChannelsThreadMember",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ThreadMember"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/channels/{channel_id}/thread-members": {
            "get": {
                "description": "Returns array of thread members objects that are members of the thread.\r",
                "operationId": "getChannelsThreadMembers",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ThreadMember"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/channels/{channel_id}/threads/archived/public": {
            "get": {
                "description": "Returns archived threads in the channel that are public. When called on a `GUILD_TEXT` channel, returns threads of type `PUBLIC_THREAD`. When called on a `GUILD_ANNOUNCEMENT` channel returns threads of type `ANNOUNCEMENT_THREAD`. Threads are ordered by `archive_timestamp`, in descending order. Requires the `READ_MESSAGE_HISTORY` permission.",
                "operationId": "getChannelsThreadsArchivedPublic",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/channels/{channel_id}/threads/archived/private": {
            "get": {
                "description": "Returns archived threads in the channel that are of type `PRIVATE_THREAD`. Threads are ordered by `archive_timestamp`, in descending order. Requires both the `READ_MESSAGE_HISTORY` and `MANAGE_THREADS` permissions.",
                "operationId": "getChannelsThreadsArchivedPrivate",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChannelObjectChanne"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/channels/{channel_id}/users/@me/threads/archived/private": {
            "get": {
                "description": "Returns archived threads in the channel that are of type `PRIVATE_THREAD`, and the user has joined. Threads are ordered by their `id`, in descending order. Requires the `READ_MESSAGE_HISTORY` permission.",
                "operationId": "getChannelsUsersMeThreadsArchivedPrivate",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChannelObjectChanne"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/emojis": {
            "get": {
                "description": "Returns a list of emoji objects for the given guild.",
                "operationId": "getGuildsEmojis",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Emoji"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new emoji for the guild. Requires the `MANAGE_GUILD_EXPRESSIONS` permission. Returns the new emoji object on success. Fires a Guild Emojis Update Gateway event.\r",
                "operationId": "postGuildsEmojis",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Emoji"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/emojis/{emoji_id}": {
            "patch": {
                "description": "Modify the given emoji. Requires the `MANAGE_GUILD_EXPRESSIONS` permission. Returns the updated emoji object on success. Fires a Guild Emojis Update Gateway event.\r",
                "operationId": "patchGuildsEmoji",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "emoji_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Emoji"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the given emoji. Requires the `MANAGE_GUILD_EXPRESSIONS` permission. Returns `204 No Content` on success. Fires a Guild Emojis Update Gateway event.\r",
                "operationId": "deleteGuildsEmoji",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "emoji_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds": {
            "post": {
                "description": "Create a new guild. Returns a guild object on success. Fires a Guild Create Gateway event.\r",
                "operationId": "postGuilds",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Guild"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}": {
            "get": {
                "description": "Returns the guild object for the given id. If `with_counts` is set to `true`, this endpoint will also return `approximate_member_count` and `approximate_presence_count` for the guild.",
                "operationId": "getGuild",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Guild"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a guild permanently. User must be owner. Returns `204 No Content` on success. Fires a Guild Delete Gateway event.",
                "operationId": "deleteGuild",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/preview": {
            "get": {
                "description": "Returns the guild preview object for the given id. If the user is not in the guild, then the guild must be lurkable.",
                "operationId": "getGuildsPreview",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuildPreview"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/channels": {
            "post": {
                "description": "Create a new channel object for the guild. Requires the `MANAGE_CHANNELS` permission. If setting permission overwrites, only permissions your bot has in the guild can be allowed/denied. Setting `MANAGE_ROLES` permission in channels is only possible for guild administrators. Returns the new channel object on success. Fires a Channel Create Gateway event.\r",
                "operationId": "postGuildsChannels",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Channel"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "description": "Modify the positions of a set of channel objects for the guild. Requires `MANAGE_CHANNELS` permission. Returns a 204 empty response on success. Fires multiple Channel Update Gateway events.\r",
                "operationId": "patchGuildsChannels",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/threads/active": {
            "get": {
                "description": "Returns all active threads in the guild, including public and private threads. Threads are ordered by their `id`, in descending order.",
                "operationId": "getGuildsThreadsActive",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/members/{user_id}": {
            "get": {
                "description": "Returns a guild member object for the specified user.",
                "operationId": "getGuildsMember",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuildMember"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Adds a user to the guild, provided you have a valid oauth2 access token for the user with the `guilds.join` scope. Returns a 201 Created with the guild member as the body, or 204 No Content if the user is already a member of the guild. Fires a Guild Member Add Gateway event.\r",
                "operationId": "putGuildsMember",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuildMember"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "description": "Modify attributes of a guild member. Returns a 200 OK with the guild member as the body. Fires a Guild Member Update Gateway event. If the `channel_id` is set to null, this will force the target user to be disconnected from voice.\r",
                "operationId": "patchGuildsMember",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuildMember"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a member from a guild. Requires `KICK_MEMBERS` permission. Returns a 204 empty response on success. Fires a Guild Member Remove Gateway event.\r",
                "operationId": "deleteGuildsMember",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/members/search": {
            "get": {
                "description": "Returns a list of guild member objects whose username or nickname starts with a provided string.\r",
                "operationId": "getGuildsMembersSearch",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GuildMember"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/members/@me": {
            "patch": {
                "description": "Modifies the current member in a guild. Returns a 200 with the updated member object on success. Fires a Guild Member Update Gateway event.\r",
                "operationId": "patchGuildsMembersMe",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/members/@me/nick": {
            "patch": {
                "description": "Modifies the nickname of the current user in a guild. Returns a 200 with the nickname on success. Fires a Guild Member Update Gateway event.\r",
                "operationId": "patchGuildsMembersMeNick",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/members/{user_id}/roles/{role_id}": {
            "put": {
                "description": "Adds a role to a guild member. Requires the `MANAGE_ROLES` permission. Returns a 204 empty response on success. Fires a Guild Member Update Gateway event.\r",
                "operationId": "putGuildsMembersRole",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "role_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/bans/{user_id}": {
            "get": {
                "description": "Returns a ban object for the given user or a 404 not found if the ban cannot be found. Requires the `BAN_MEMBERS` permission.",
                "operationId": "getGuildsBan",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Ban"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove the ban for a user. Requires the `BAN_MEMBERS` permissions. Returns a 204 empty response on success. Fires a Guild Ban Remove Gateway event.\r",
                "operationId": "deleteGuildsBan",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/roles": {
            "post": {
                "description": "Create a new role for the guild. Requires the `MANAGE_ROLES` permission. Returns the new role object on success. Fires a Guild Role Create Gateway event. All JSON params are optional.\r",
                "operationId": "postGuildsRoles",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "description": "Modify the positions of a set of role objects for the guild. Requires the `MANAGE_ROLES` permission. Returns a list of all of the guild's role objects on success. Fires multiple Guild Role Update Gateway events.\r",
                "operationId": "patchGuildsRoles",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/roles/{role_id}": {
            "patch": {
                "description": "Modify a guild role. Requires the `MANAGE_ROLES` permission. Returns the updated role on success. Fires a Guild Role Update Gateway event.\r",
                "operationId": "patchGuildsRole",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "role_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a guild role. Requires the `MANAGE_ROLES` permission. Returns a 204 empty response on success. Fires a Guild Role Delete Gateway event.\r",
                "operationId": "deleteGuildsRole",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "role_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/mfa": {
            "post": {
                "description": "Modify a guild's MFA level. Requires guild ownership. Returns the updated level on success. Fires a Guild Update Gateway event.\r",
                "operationId": "postGuildsMfa",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuildObjectMf"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/prune": {
            "post": {
                "description": "Begin a prune operation. Requires the `KICK_MEMBERS` permission. Returns an object with one `pruned` key indicating the number of members that were removed in the prune operation. For large guilds it's recommended to set the `compute_prune_count` option to `false`, forcing `pruned` to `null`. Fires multiple Guild Member Remove Gateway events.\r",
                "operationId": "postGuildsPrune",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/regions": {
            "get": {
                "description": "Returns a list of voice region objects for the guild. Unlike the similar `/voice` route, this returns VIP servers when the guild is VIP-enabled.",
                "operationId": "getGuildsRegions",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/VoiceRegion"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/integrations": {
            "get": {
                "description": "Returns a list of integration objects for the guild. Requires the `MANAGE_GUILD` permission.\r",
                "operationId": "getGuildsIntegrations",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Integration"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/widget": {
            "get": {
                "description": "Returns a guild widget settings object. Requires the `MANAGE_GUILD` permission.",
                "operationId": "getGuildsWidget",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuildWidgetSettings"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/widget.json": {
            "get": {
                "description": "Returns the widget for the guild.",
                "operationId": "getGuildsWidgetJson",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuildWidget"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/widget.png": {
            "get": {
                "description": "Returns a PNG image widget for the guild. Requires no permissions or authentication.\r",
                "operationId": "getGuildsWidgetPng",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/welcome-screen": {
            "get": {
                "description": "Returns the Welcome Screen object for the guild. If the welcome screen is not enabled, the `MANAGE_GUILD` permission is required.",
                "operationId": "getGuildsWelcomeScreen",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WelcomeScreen"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/onboarding": {
            "get": {
                "description": "Returns the Onboarding object for the guild.",
                "operationId": "getGuildsOnboarding",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuildOnboarding"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/voice-states/{user_id}": {
            "patch": {
                "description": "Updates another user's voice state. Fires a Voice State Update Gateway event.",
                "operationId": "patchGuildsVoiceState",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/scheduled-events": {
            "get": {
                "description": "Returns a list of guild scheduled event objects for the given guild.",
                "operationId": "getGuildsScheduledEvents",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GuildScheduledEvent"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a guild scheduled event in the guild. Returns a guild scheduled event object on success. Fires a Guild Scheduled Event Create Gateway event.\r",
                "operationId": "postGuildsScheduledEvents",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuildScheduledEvent"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}": {
            "get": {
                "description": "Get a guild scheduled event. Returns a guild scheduled event object on success.",
                "operationId": "getGuildsScheduledEvent",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "guild_scheduled_event_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuildScheduledEvent"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "description": "Modify a guild scheduled event. Returns the modified guild scheduled event object on success. Fires a Guild Scheduled Event Update Gateway event.\r",
                "operationId": "patchGuildsScheduledEvent",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "guild_scheduled_event_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuildScheduledEvent"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a guild scheduled event. Returns a `204` on success. Fires a Guild Scheduled Event Delete Gateway event.",
                "operationId": "deleteGuildsScheduledEvent",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "guild_scheduled_event_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/templates/{template_code}": {
            "get": {
                "description": "Returns a guild template object for the given code.",
                "operationId": "getGuildsTemplate",
                "parameters": [
                    {
                        "name": "template_code",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuildTemplate"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/templates": {
            "get": {
                "description": "Returns an array of guild template objects. Requires the `MANAGE_GUILD` permission.",
                "operationId": "getGuildsTemplates",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GuildTemplate"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/templates/{template_code}": {
            "put": {
                "operationId": "putGuildsTemplate",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "template_code",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuildTemplate"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes the template. Requires the `MANAGE_GUILD` permission. Returns the deleted guild template object on success.",
                "operationId": "deleteGuildsTemplate",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "template_code",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuildTemplate"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/invites/{invite_code}": {
            "get": {
                "description": "Returns an invite object for the given code.",
                "operationId": "getInvite",
                "parameters": [
                    {
                        "name": "invite_code",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invite"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an invite. Requires the `MANAGE_CHANNELS` permission on the channel this invite belongs to, or `MANAGE_GUILD` to remove any invite across the guild. Returns an invite object on success. Fires an Invite Delete Gateway event.\r",
                "operationId": "deleteInvite",
                "parameters": [
                    {
                        "name": "invite_code",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invite"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/stage-instances": {
            "post": {
                "description": "Creates a new Stage instance associated to a Stage channel. Returns that Stage instance. Fires a Stage Instance Create Gateway event.\r",
                "operationId": "postStageInstances",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StageInstanceObjectStageInstanceSt"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/stage-instances/{channel_id}": {
            "get": {
                "description": "Gets the stage instance associated with the Stage channel, if it exists.",
                "operationId": "getStageInstance",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes the Stage instance. Returns `204 No Content`. Fires a Stage Instance Delete Gateway event.\r",
                "operationId": "deleteStageInstance",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/stickers/{sticker_id}": {
            "get": {
                "description": "Returns a sticker object for the given sticker ID.",
                "operationId": "getSticker",
                "parameters": [
                    {
                        "name": "sticker_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Sticker"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/stickers": {
            "get": {
                "description": "Returns an array of sticker objects for the given guild. Includes `user` fields if the bot has the `MANAGE_GUILD_EXPRESSIONS` permission.",
                "operationId": "getGuildsStickers",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Sticker"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new sticker for the guild. Send a `multipart/form-data` body. Requires the `MANAGE_GUILD_EXPRESSIONS` permission. Returns the new sticker object on success. Fires a Guild Stickers Update Gateway event.\r",
                "operationId": "postGuildsStickers",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Sticker"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/guilds/{guild_id}/stickers/{sticker_id}": {
            "patch": {
                "description": "Modify the given sticker. Requires the `MANAGE_GUILD_EXPRESSIONS` permission. Returns the updated sticker object on success. Fires a Guild Stickers Update Gateway event.\r",
                "operationId": "patchGuildsSticker",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sticker_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Sticker"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the given sticker. Requires the `MANAGE_GUILD_EXPRESSIONS` permission. Returns `204 No Content` on success. Fires a Guild Stickers Update Gateway event.\r",
                "operationId": "deleteGuildsSticker",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sticker_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me": {
            "get": {
                "description": "Returns the user object of the requester's account. For OAuth2, this requires the `identify` scope, which will return the object _without_ an email, and optionally the `email` scope, which returns the object _with_ an email.",
                "operationId": "getUsersMe",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "description": "Modify the requester's user account settings. Returns a user object on success. Fires a User Update Gateway event.\r",
                "operationId": "patchUsersMe",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/guilds": {
            "get": {
                "description": "Returns a list of partial guild objects the current user is a member of. Requires the `guilds` OAuth2 scope.",
                "operationId": "getUsersMeGuilds",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Guild"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/guilds/{guild_id}/member": {
            "get": {
                "description": "Returns a guild member object for the current user. Requires the `guilds.members.read` OAuth2 scope.",
                "operationId": "getUsersMeGuildsMember",
                "parameters": [
                    {
                        "name": "guild_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuildMember"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/channels": {
            "post": {
                "description": "Create a new group DM channel with multiple users. Returns a DM channel object. This endpoint was intended to be used with the now-deprecated GameBridge SDK. Fires a Channel Create Gateway event.\r",
                "operationId": "postUsersMeChannels",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Channel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/connections": {
            "get": {
                "description": "Returns a list of connection objects. Requires the `connections` OAuth2 scope.",
                "operationId": "getUsersMeConnections",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Connection"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/applications/{application_id}/role-connection": {
            "put": {
                "description": "Updates and returns the application role connection for the user. Requires an OAuth2 access token with `role_connections.write` scope for the application specified in the path.",
                "operationId": "putUsersMeApplicationsRoleConnection",
                "parameters": [
                    {
                        "name": "application_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/voice/regions": {
            "get": {
                "description": "Returns an array of voice region objects that can be used when setting a voice or stage channel's `rtc_region`.",
                "operationId": "getVoiceRegions",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/VoiceRegion"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/channels/{channel_id}/webhooks": {
            "post": {
                "description": "Creates a new webhook and returns a webhook object on success. Requires the `MANAGE_WEBHOOKS` permission. Fires a Webhooks Update Gateway event.\r",
                "operationId": "postChannelsWebhooks",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "description": "Returns a list of channel webhook objects. Requires the `MANAGE_WEBHOOKS` permission.",
                "operationId": "getChannelsWebhooks",
                "parameters": [
                    {
                        "name": "channel_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Webhook"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/webhooks/{webhook_id}": {
            "get": {
                "description": "Returns the new webhook object for the given id.",
                "operationId": "getWebhook",
                "parameters": [
                    {
                        "name": "webhook_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Webhook"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "description": "Modify a webhook. Requires the `MANAGE_WEBHOOKS` permission. Returns the updated webhook object on success. Fires a Webhooks Update Gateway event.\r",
                "operationId": "patchWebhook",
                "parameters": [
                    {
                        "name": "webhook_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Webhook"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/webhooks/{webhook_id}/{webhook_token}": {
            "patch": {
                "operationId": "patchWebhook",
                "parameters": [
                    {
                        "name": "webhook_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "webhook_token",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteWebhook",
                "parameters": [
                    {
                        "name": "webhook_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "webhook_token",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/webhooks/{webhook_id}/{webhook_token}/messages/{message_id}": {
            "get": {
                "description": "Returns a previously-sent webhook message from the same token. Returns a message object on success.",
                "operationId": "getWebhooksMessage",
                "parameters": [
                    {
                        "name": "webhook_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "webhook_token",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "message_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "description": "Edits a previously-sent webhook message from the same token. Returns a message object on success.\r",
                "operationId": "patchWebhooksMessage",
                "parameters": [
                    {
                        "name": "webhook_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "webhook_token",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "message_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a message that was created by the webhook. Returns a `204 No Content` response on success.",
                "operationId": "deleteWebhooksMessage",
                "parameters": [
                    {
                        "name": "webhook_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "webhook_token",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "message_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "servers": [
        {
            "url": "https://discord.com/api/v10"
        }
    ]
}